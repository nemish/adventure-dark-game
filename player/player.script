local gravity = -20
local gravityV3 = vmath.vector3(0, gravity, 0)
local CONSTRUCTION_GROUP = hash("construction")
local ELEVATOR_GROUP = hash("elevator")
local GROUND_GROUP = hash("ground")
local ENEMY_GROUP = hash("enemy")

go.property("health", 3)

function init(self)
    -- go.set("#sprite", "saturation", vmath.vector4(1, 0, 0, 0))
    go.set("#sprite1", "tint.w", 0.7)
	msg.post(".", "acquire_input_focus")
	self.velocity = vmath.vector3(0, 0, 0)
	self.ground_contact = false
	self.ladder_contact = false
    self.direction = 1
    self.land_contact = false
    self.slide_start = nil
    self.slide_start_direction_int = nil
    self.jump_start = false
    self.second_jump = false
	self.climbing = false
    self.ground_angle_y = 1
    self.ground_angle_x = 0
	self.actions = {}
    self.can_act = false
    self.elevator_id_standing_on = nil
    self.hurt = false
    self.dead = false
    self.finally_dead = false
    self.direction = 1
    self.hurt_direction = 1
    self.enemies = {
        [1] = nil,
        [-1] = nil
    }
    msg.post("level1:/gui#gui", "set_health", { health = self.health })
    msg.post("level1:/camera#main_camera", "look_at", { position = go.get_position(), initial = true })

    self.current_animation = nil -- the current animation
end


function final(self)
	msg.post(".", "release_input_focus")
end


-- play animation unless the same animation is already playing
local function play_animation(self, animation)
    if self.current_animation ~= animation then
        self.current_animation = animation
        msg.post("#sprite", "play_animation", { id = animation })
    end
end


function update(self, dt)
    -- if self.attacking then
    --     return

    if self.finally_dead then
        self.velocity.x = 0
    elseif self.dead then
        self.velocity.x = self.hurt_direction * 250
        play_animation(self, hash("Die"))
    elseif self.hurt then
        self.velocity.x = self.hurt_direction * 250
        play_animation(self, hash("Hurt"))
    elseif self.attacking then
        self.velocity.x = 0
    else
        if self.slide_start and os.clock() - self.slide_start < 0.2 then
            if math.abs(self.velocity.x) < 20 then
                self.slide_start = nil
            else
                play_animation(self, hash("Slide"))
                multiplier = get_slide_direction(self)
                if multiplier == 0 or multiplier ~= self.slide_start_direction_int then
                    self.slide_start = nil
                end
                self.velocity.x = multiplier * 300
            end
        elseif self.slide_start then
            self.slide_start = nil
        end

        if not self.slide_start and not self.attacking and not self.hurt then
            if self.actions[hash("left")] then
                self.direction = -1
                self.velocity.x = -200
                sprite.set_hflip("#sprite", true)
                if self.land_contact then
                    play_animation(self, hash("Run"))
                end
            elseif self.actions[hash("right")] then
                self.direction = 1
                self.velocity.x = 200
                sprite.set_hflip("#sprite", false)
                if self.land_contact then
                    play_animation(self, hash("Run"))
                end
            -- and clear it if we're not moving left/right
            else
                self.velocity.x = 0
            end
        end
    end


	-- are we in contact with a ladder?
	if self.ladder_contact then
		-- set vertical velocity if we are climbing up or down
		-- also set flag to indicate that we are climbing
		if self.actions[hash("up")] then
			self.velocity.y = 150
			self.ground_contact = true
			self.climbing = true
            play_animation(self, hash("Run"))
		elseif self.actions[hash("down")] then
			self.velocity.y = -150
			self.ground_contact = true
			self.climbing = true
            play_animation(self, hash("JumpStart"))
		elseif self.climbing then
			self.velocity.y = 0
		end
	else
		self.climbing = false
	end

    if not self.actions[hash("left")] and not self.actions[hash("right")] and self.land_contact and not self.slide_start and not self.hurt and not self.attacking and not self.dead and not self.finally_dead then
        play_animation(self, hash("Idle"))
    end

	-- apply gravity if there's no ground contact and if we're not climbing a ladder
	if not self.ground_contact and not self.climbing then
		self.velocity = self.velocity + gravityV3
        if self.velocity.y < -240 then
            if not self.dead and not self.finally_dead then
                play_animation(self, hash("FallDown"))
            end
            self.hurt = false
        end
	end

	-- apply velocity to the player character
    local pos = go.get_position() + self.velocity * dt

	go.set_position(pos)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.ladder_contact = false

    if math.abs(self.velocity.x) < 25 and vert_moving_finished(self) and not self.attacking and not self.hurt and not self.dead and not self.finally_dead then
        play_animation(self, hash("Idle"))
    end

    msg.post("level1:/fg#parallax", "player_move", { velocity = self.velocity })
    msg.post("level1:/bg#parallax_bg", "player_move", { velocity = self.velocity })
    msg.post("level1:/camera#main_camera", "look_at", { position = pos })

end


function vert_moving_finished(self)
    return math.abs(self.velocity.y) < 25
end


-- from the platformer tutorial on defold.com
local function handle_geometry_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
	local comp = (distance - proj) * normal
	self.correction = self.correction + comp
	go.set_position(go.get_position() + comp)
    self.ground_angle_y = normal.y
    self.ground_angle_x = normal.x
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	proj = vmath.dot(self.velocity, normal)
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
		self.velocity.x = 0
	end
end


function on_message(self, message_id, message, sender)
    if message_id == hash("animation_done") then
        if self.current_animation == hash("Die") then
            self.dead = false
            self.finally_dead = true
        elseif self.current_animation == hash("Hurt") then
            self.hurt = false
        elseif self.current_animation == hash("Attack") then
            self.attacking = false
        elseif self.jump_start then
            play_animation(self, hash("JumpLoop"))
            self.jump_start = false
        end
    elseif message_id == hash("trigger_response") then
        if sender.fragment == hash("ground_checker") and message.group == ELEVATOR_GROUP then
            self.elevator_id_standing_on = message.other_id
            if message.enter then
                msg.post(self.elevator_id_standing_on, "activate")
            else
                msg.post(self.elevator_id_standing_on, "deactivate")
                self.elevator_id_standing_on = nil
            end
        elseif sender.fragment == hash("ground_checker") and message.enter then
            self.land_contact = true
            self.jump_start = false
            self.second_jump = false
        elseif sender.fragment == hash("right_checker") or sender.fragment == hash("left_checker") then
            local enemy = message.enter and message.other_id or nil
            local sign = sender.fragment == hash("right_checker") and 1 or -1
            self.enemies[sign] = enemy
            if self.attacking and sign == self.direction then
                msg.post(enemy, "damage", { direction = self.direction })
            end
        end
    elseif message_id == hash("elevator_stop") then
        if self.elevator_id_standing_on then
            msg.post(self.elevator_id_standing_on, "activate")
        end
	elseif message_id == hash("contact_point_response") then
		if (message.group == GROUND_GROUP or message.group == CONSTRUCTION_GROUP or message.group == ENEMY_GROUP) then
            handle_geometry_contact(self, message.normal, message.distance)
            if message.group == ENEMY_GROUP and not self.hurt then
                self.hurt_direction = (go.get_position(message.other_id).x - go.get_position().x) > 0 and -1 or 1
                self.hurt = true
                self.velocity.y = 150
                self.health = self.health - 1
                msg.post("level1:/gui#gui", "set_health", { health = self.health })
                if self.health <= 0 then
                    self.dead = true
                end
            end
		elseif message.group == hash("ladder") then
			self.ladder_contact = true
		end
	end
end


function get_slide_direction(self)
    dir = 0
    if self.actions[hash("left")] then
        if self.ground_angle_y == 1 or self.ground_angle_x < 0 then
            dir = -1
        end
    elseif self.actions[hash("right")] then
        if self.ground_angle_y == 1 or self.ground_angle_x >= 0 then
            dir = 1
        end
    end
    return dir
end

function on_input(self, action_id, action)

	if action_id then
        if self.hurt then
            if (action_id == hash("left") or action_id == hash("right")) then
                -- set/clear action in map of all actions
                if action.pressed then
                    self.actions[action_id] = true
                    self.move_begin = true
                elseif action.released then
                    self.actions[action_id] = nil
                end
            end
            return
        end

		-- set/clear action in map of all actions
		if action.pressed then
			self.actions[action_id] = true
            self.move_begin = true
		elseif action.released then
			self.actions[action_id] = nil
		end

        -- slide
		if action_id == hash("slide") and action.pressed then
            if self.elevator_id_standing_on then
                msg.post("level1:/elevator/elevator", "elevator_trigger", { height = 100 })
            end

            if self.land_contact and self.ground_contact and not self.slide_start then
                self.slide_start_direction_int = get_slide_direction(self)

                if self.slide_start_direction_int then
                    play_animation(self, hash("Slide"))
                    self.slide_start = os.clock()
                end
            end
        elseif action_id == hash("attack") and action.pressed and self.land_contact then
            self.attacking = true
            play_animation(self, hash("Attack"))
            local enemyId = self.enemies[self.direction]
            if enemyId then
                msg.post(enemyId, "damage", { direction = self.direction })
            end
        -- jump
        elseif action_id == hash("trigger") and action.pressed then
            if not self.land_contact and not self.second_jump then
                self.velocity.y = 800
                play_animation(self, hash("DoubleJump"))
                self.second_jump = true
            elseif self.land_contact then
                self.velocity.y = 500
                play_animation(self, hash("JumpStart"))
            end
            self.land_contact = false
            self.jump_start = true
            self.slide_start = false
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
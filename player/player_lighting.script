require 'main.watcher'

go.property("initial_value", 0.99)
go.property("delta", 0.15)


function do_animate(self, pos)
    local duration = math.random(3, 6)
    -- local pauseTime = math.random(0.5, 4)
    local d = math.random(0.5, self.delta)
    local value = self.initial_value + d * self.direction

    go.animate(
        "#sprite",
        "tint.w",
        go.PLAYBACK_ONCE_FORWARD,
        value,
        go.EASING_LINEAR,
        duration,
        0,
        -- pauseTime,
        reverse_animation
    )
end


function reverse_animation(self, url, property)
    self.direction = self.direction * -1
    do_animate(self)
end


function init(self)
    self.direction = 1
    self.pos = go.get_position()
    self.initial_position = self.pos
    do_animate(self)
    -- go.animate(".", "position.x", go.PLAYBACK_LOOP_PINGPONG, self.pos.x + 100, go.EASING_LINEAR, 1)
    -- self.pos = go.get_position()
	-- Add initialization code here
	-- Remove this function if not needed
end


function update(self, dt)
    if self.look_at and self.offset then
        self.pos = vmath.lerp(0.2, self.pos, self.look_at + self.offset)
        go.set_position(self.pos)
    end
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
    if message_id == hash("look_at") then
        self.look_at = message.position
        if message.initial then
            self.offset = self.initial_position - self.look_at
        end
    end
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

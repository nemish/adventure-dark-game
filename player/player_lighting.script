require 'main.watcher'

go.property('beauty_effect', true)
go.property("initial_value", 0.95)
go.property("delta", 0.9)


function do_animate(self, pos)
    local duration = math.random(3, 6)
    -- local pauseTime = math.random(0.5, 4)
    local d = math.random(0.5, self.delta)
    local value = self.initial_value + d * self.direction

    go.animate(
        "#sprite",
        "tint.w",
        go.PLAYBACK_ONCE_FORWARD,
        value,
        go.EASING_LINEAR,
        duration,
        0,
        -- pauseTime,
        reverse_animation
    )
end


function reverse_animation(self, url, property)
    self.direction = self.direction * -1
    do_animate(self)
end


function init(self)
    self.direction = 1
    self.t = 0
    self.duration = 1
    self.pos = go.get_position()
    self.opacity = 98
    self.initial_position = self.pos
    particlefx.play("#glow")
    self.anim_cycle = 0
    self.opacity_direction = 1
end


function end_animation(self)
    self.t = 0
end


function after_blow(self)
    self.animating_2 = false
    self.last_opacity = self.opacity
    self.opacity = 98
    self.duration = 0.4
    self.do_animate_blow = false
    do_animate_tint(self, end_animation)
    self.t = 0
end


function blow(self, opacity)
    self.opacity = opacity or 15
    self.duration = 0.05
    self.animating_2 = true
    do_animate_tint(self, after_blow)
    self.t = 0
end


function do_animate_tint(self, callback_fn)
    local value = math.random(self.opacity - 3, self.opacity) / 100
    go.animate(
        "#sprite",
        "tint.w",
        go.PLAYBACK_ONCE_FORWARD,
        value,
        go.EASING_LINEAR,
        self.duration,
        0,
        -- pauseTime,
        callback_fn
    )
end


function do_beauty(self, dt)
    self.t = self.t + dt
    if self.t > self.duration and not self.animating_2 then
        self.duration = math.random(1, 50) / 100
        do_animate_tint(self, end_animation)
        self.t = 0
        -- go.set('#sprite', "tint.w", value)
    end
end


function update(self, dt)
    if self.beauty_effect then
        do_beauty(self, dt)
    end

    if self.look_at and self.offset then
        self.pos = vmath.lerp(0.2, self.pos, self.look_at + self.offset)
        go.set_position(self.pos)
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("look_at") then
        self.look_at = message.position
        if message.initial then
            self.offset = self.initial_position - self.look_at
        end
    elseif message_id == hash('blow') then
        blow(self, 40 + math.abs(self.pos.x - message.pos.x) / 10)
    end
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
